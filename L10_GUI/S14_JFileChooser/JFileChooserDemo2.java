/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package L10_GUI.S14_JFileChooser;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author NGHIA NGUYEN
 */
public class JFileChooserDemo2 extends javax.swing.JFrame {

    /**
     * Creates new form JFileChooserDemo
     */
    public JFileChooserDemo2() {
        initComponents();
        initDataTable();
    }

    public void initDataTable() {

        /**
         * get the properties of current table model first, then add new rows to
         * it
         */
        // get current properties
        DefaultTableModel defaultTableModel = (DefaultTableModel) postCodesTable.getModel();

        // add rows
        defaultTableModel.addRow(new Object[]{"Hà Giang", "20xxx"});
        defaultTableModel.addRow(new Object[]{"Cao Bằng", "21xxx"});
        defaultTableModel.addRow(new Object[]{"Bắc Kạn", "23xxx"});
        defaultTableModel.addRow(new Object[]{"Tuyên Quang", "22xxx"});
//        defaultTableModel.addRow(new Object[]{"Lào Cai", "31xxx"});
//        defaultTableModel.addRow(new Object[]{"Điện Biên", "32xxx"});
//        defaultTableModel.addRow(new Object[]{"Lai Châu", "30xxx"});
//        defaultTableModel.addRow(new Object[]{"Sơn La", "34xxx"});
//        defaultTableModel.addRow(new Object[]{"Yên Bái", "33xxx"});
//        defaultTableModel.addRow(new Object[]{"Hòa Bình", "36xxx"});
//        defaultTableModel.addRow(new Object[]{"Thái Nguyên", "24xxx"});

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loadDatabaseBtn = new javax.swing.JButton();
        saveDatabaseBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        postCodesTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        loadDatabaseBtn.setText("Load Database");
        loadDatabaseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDatabaseBtnActionPerformed(evt);
            }
        });

        saveDatabaseBtn.setText("Save Database");
        saveDatabaseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDatabaseBtnActionPerformed(evt);
            }
        });

        postCodesTable.setAutoCreateRowSorter(true);
        postCodesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Province/City", "PostalCode"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(postCodesTable);
        if (postCodesTable.getColumnModel().getColumnCount() > 0) {
            postCodesTable.getColumnModel().getColumn(0).setPreferredWidth(250);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loadDatabaseBtn)
                .addGap(18, 18, 18)
                .addComponent(saveDatabaseBtn)
                .addContainerGap(164, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadDatabaseBtn)
                    .addComponent(saveDatabaseBtn))
                .addContainerGap(307, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(67, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadDatabaseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDatabaseBtnActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(rootPane);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();

            try (ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(selectedFile.toString()))) {

                // Read the serialized data from the file and cast it to the appropriate class
                ArrayList<Location> dataList = (ArrayList<Location>) inputStream.readObject();

                // Create a DefaultTableModel to store data
                DefaultTableModel model = (DefaultTableModel) postCodesTable.getModel();
                
                model.setRowCount(0);


                // Add rows to the model
                for (Location entry : dataList) {
                    Object[] rowData = {entry.getProvinceName(), entry.getPostalCode()};
                    model.addRow(rowData);
                }

                // Set the model to the table
                postCodesTable.setModel(model);
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(rootPane, "Error reading object data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } catch (ClassNotFoundException e) {
                JOptionPane.showMessageDialog(rootPane, "Error reading object data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

        } // if the user cancelled the operation
        else {
            JOptionPane.showMessageDialog(rootPane, "User cancelled the operation.");
        }
    }//GEN-LAST:event_loadDatabaseBtnActionPerformed

    private void saveDatabaseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDatabaseBtnActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showSaveDialog(rootPane);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();

            DefaultTableModel model = (DefaultTableModel) postCodesTable.getModel();
            ArrayList<Location> dataList = new ArrayList<>();

            // Iterate over rows and columns of the table to create DataEntry objects
            for (int row = 0; row < model.getRowCount(); row++) {
                String column1 = (String) model.getValueAt(row, 0);
                String column2 = (String) model.getValueAt(row, 1);
                Location entry = new Location(column1, column2);
                dataList.add(entry);
            }

            try (ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream(selectedFile.toString()))) {
                outputStream.writeObject(dataList);
                JOptionPane.showMessageDialog(null, "Data saved to object file successfully!");
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(rootPane, "Error reading object data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

        } // if the user cancelled the operation
        else {
            JOptionPane.showMessageDialog(rootPane, "User cancelled the operation.");
        }
    }//GEN-LAST:event_saveDatabaseBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFileChooserDemo2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFileChooserDemo2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFileChooserDemo2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFileChooserDemo2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFileChooserDemo2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadDatabaseBtn;
    private javax.swing.JTable postCodesTable;
    private javax.swing.JButton saveDatabaseBtn;
    // End of variables declaration//GEN-END:variables
}
